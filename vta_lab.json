{
	"_id": "MckZN8X24RLdAPrdQ",
	"title": "IDS/IPS system basics",
	"description": "How to install and configure Suricata IDS. Writing your first rule.\nConfiguring IPS mode with drop rules.",
	"success": "Profit!",
	"owner": "AqW8vDWa49bAp7jnG",
	"createdAt": "2018-01-12T12:18:55.365Z",
	"updatedAt": "2018-04-13T11:28:00.996Z",
	"in_hub": false,
	"allow_end": false,
	"show_chat": false,
	"disable_feedback": false,
	"display": "progress",
	"git": {
		"uri": "git@github.com:haam3r/RFVTA_IDS_Lab1.git",
		"user": "AqW8vDWa49bAp7jnG",
		"branch": "",
		"files": [
			{
				"path": "bootstrap.sh",
				"commit": {
					"hash": "latest",
					"author": "N/A",
					"date": "N/A",
					"message": "latest commit in this branch"
				},
				"branch": "master",
				"name": "labinit.sh"
			}
		]
	},
	"display_unit": "%",
	"version": "0.1",
	"contributors": [
		"9BEHk7T3vJrCJTWcs"
	],
	"test_users": [],
	"material": "",
	"web": "",
	"topology": "",
	"objectives": [
		{
			"title": "Introduction",
			"weight": 1,
			"oname": "obj-djk",
			"description": "# Introduction\n\nThis lab helps you to become familiar with IDS/IPS systems. But let's start off with a refresher on what they are and how they operate. After that a brief description of what this lab will cover so you know what to expect.\n\n## Intrusion Detection System\n\nIntrusion Detection System (here on out IDS) is a solution designed to monitor network traffic to discover anomalous behaviour. Ad IDS solution works by receiving a copy of  the infrastructures network traffic and matching network packet header and/or content against signatures. Intrusion Prevention System (here on out IPS) is usually a specific configuration of an IDS where the device or software is configured in a way where the traffic actually passes through the device, giving the additional ability of blocking traffic that matches a signature.",
			"createdAt": "2018-01-12T12:32:52.796Z",
			"updatedAt": "2018-02-26T20:30:12.329Z",
			"longTitle": "Introduction",
			"enabled": true,
			"compulsory": true,
			"completionMethod": "view",
			"steps": [
				{
					"title": "Lab infra",
					"weight": 1,
					"uname": "step-rf70",
					"description": "# General overview of the labs infrastructure\n\nYour lab is composed of three machines:\n- Desktop machine from where you can administer the other systems\n- Web server providing a webpage that you are tasked with defending\n- IDS server that is in front of the web server. \n\nFrom the desktop machine, you can SSH into the other machines.\n \nBelow you can find complete details on the machines.\n\n### Web server\n- DNS: www.deeppacketcorp.lab\n- IP: 10.10.10.2\n- username: student\n\n### IDS\n- DNS: ids.deeppacketcorp.lab\n- IP: 192.168.0.1\n- username: student\n\n### Desktop\n- DNS: desktop.deeppacketcorp.lab\n- IP: 192.168.0.100\n- username: student",
					"createdAt": "2018-01-12T12:33:42.024Z",
					"updatedAt": "2018-04-12T09:07:05.827Z",
					"longTitle": "Lab infra",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				},
				{
					"title": "Rules",
					"weight": 1,
					"uname": "step-puh1",
					"description": "# Rules of the lab\n\n- Please do not alert or block on SSH traffic. In addition to you, it's used for checks and setting up various things to make your learning experience the best possible.\n- For objectives, that ask for an answer, 5 attempts are given.",
					"createdAt": "2018-01-12T12:36:34.786Z",
					"updatedAt": "2018-04-12T09:08:40.633Z",
					"longTitle": "Rules",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				}
			],
			"material": "",
			"web": ""
		},
		{
			"title": "Setup IDS",
			"weight": 1,
			"oname": "obj-hn3",
			"description": "# Installing Suricata IDS\n\nThe first thing with any software, is to install and configure it. This objective tasks you to install the open-source Suricata IDS system.\nAfter installation we will cover the basic configuration options, to get everything up and running.\n\nThe material link references Suricata's official documentation for installing it on Ubuntu through their official PPA(Personal Package Archive).",
			"createdAt": "2018-01-12T12:38:12.668Z",
			"updatedAt": "2018-04-12T09:09:46.339Z",
			"longTitle": "Setup IDS",
			"enabled": true,
			"compulsory": true,
			"completionMethod": "view",
			"steps": [
				{
					"title": "Install Suricata",
					"weight": 1,
					"uname": "step-rx10",
					"description": "# Installation steps\n\nAlthough there are many ways to install Suricata, the easiest way on Ubuntu is to use the PPA(Personal Package Archive) provided by the developers. Installing this way get's us up and running quickly with prebuilt packages and sensible defaults.\nOn smaller networks this setup usually more than sufficient. On high traffic networks however, building from source with custom options and utilising other capture library's can yield significant performance gains. More advanced install modes are not covered in this lab.\n\n## Install\n \n```bash\n# Add the Suricata PPA\nsudo add-apt-repository ppa:oisf/suricata-stable\n# Refresh package lists\nsudo apt-get update\n# Install suricata\nsudo apt-get install suricata\n```\n\nAs you can see, the PPA makes installation a breeze. Although Suricata in now installed, it won't be of much use until you configure it. Continue to the next step.",
					"createdAt": "2018-01-12T12:38:27.035Z",
					"updatedAt": "2018-04-12T09:12:20.285Z",
					"longTitle": "Install Suricata",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "test",
					"material": "http://suricata.readthedocs.io/en/suricata-4.0.4/install.html#ubuntu",
					"web": ""
				},
				{
					"title": "Configure Suricata",
					"weight": 1,
					"uname": "step-rjo1",
					"description": "# Configuring Suricata\n\nWhen installing from the Ubuntu PPA, configuration parameters for Suricata are placed inside the file `/etc/suricata/suricata.yaml`.\nThe PPA installation method also installs the latest version of the EmergingThreats ruleset at `/etc/suricata/rules`.\nYou will now have to configure the minimum necessary options to get Suricata up and running properly.\n\nHere we also have to take into consideration that our IDS machine is placed inline in our network. This means that the IDS machine has to forward all packets coming through it and while forwarding also let Suricata analyse them. For this to work we also have to configure iptables.\nWhen not running inline, you only have to configure the interface receiving the traffic into promiscuous mode and tell Suricata to listen on that interface via the configuration options.\n\n## Ensure Suricata has NFQ support\n\nFor inline operation using iptables, Suricata needs support for NFQ. The PPA binaries already come with this enabled, but to verify you can use the following command:\n\n```\nsuricata --build-info\n```\n\n## Setting up iptables and NFQUEUE\n\nFirst let's make sure, that the nfqueue module is loaded:\n```\nmodprobe nfnetlink_queue\n# To verify\nlsmod | grep nfnetlink_queue\n```\n\nThe easiest method when forwarding traffic, is to add the following iptables rule:\n\n```\nsudo iptables -I FORWARD -j NFQUEUE\n```\n\n## Configure Suricata options\n\n1. Open `/etc/default/suricata` and change the `LISTENMODE` option to `nfqueue`.\n1. Open `/etc/suricata/suricata.yaml` in a text editor of your choice and configure the following options:\n   - In the very beginning under `address-groups` configure the `HOME_NET` parameter. This should be your local subnet i.e. the subnet that has the web server in it.\n1. Run `systemctl restart suricata` to reload the configuration changes",
					"createdAt": "2018-01-12T12:38:40.721Z",
					"updatedAt": "2018-04-12T13:06:34.778Z",
					"longTitle": "Configure Suricata",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "test",
					"material": "http://suricata.readthedocs.io/en/suricata-4.0.4/setting-up-ipsinline-for-linux.html",
					"web": ""
				}
			],
			"material": "https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Ubuntu_Installation_-_Personal_Package_Archives_(PPA)",
			"web": ""
		},
		{
			"title": "My first rule",
			"weight": 1,
			"oname": "obj-h66",
			"description": "Now that we have Suricata up and running, it's time to start writing rules.\n\nAn example of a Suricata rule:\n\n![Example rule](https://redmine.openinfosecfoundation.org/attachments/download/440/intro_sig.png)\n\n## The three parts of a rule\n\n### Action\n\nWhat to do when a signature matches. There are four options:\n- pass - When a packet matches a signature, stop scanning the packet and for the current packet skip to the end of the rules\n- drop - If a signature matches, drop the packet. Only for IPS/inline mode. Will also log an alert. On the other hand will cause timeouts, because the other end will get no feedback.\n - reject - Reject the packet by sending either a tcp reset or icmp error packet. Also generate and alert and in IPS/inline mode the packet will also be dropped\n - alert - If a signature matches the packet, generate an alert.\n\n### Header\n\nSpecifys what kind of traffic to match the rule-options against. This has multiple options. Whenever possible try to specify one of the application layer protocols. This reduces the amount of matching that the engine has to do.\n\n#### Protocol\nHas 4 main options:\n- tcp - Any TCP traffic\n-  udp - Any UDP traffic\n- icmp - Any ICMP traffic\n- ip - Any traffic i.e. all of the above\n\nIn addition to these, Suricata also supports some application layer protocols:\n- http\n- ftp\n- tls (this includes ssl)\n- smb \n- dns\n\n#### Source and destination\nHere you can specify IPv4 and IPv6 addresses (both single addresses and CIDR matches are supported) that the traffic should match. You can also use variables like $HOME_NET that can be specified in the suricata.yaml configuration file. Negation matches with \"!\" and grouping matches with \"[]\" are also supported.\n\n**Examples:**\n- !192.168.1.1/24 - any address that does not belong to this subnet\n- [10.10.10.0/24, !10.10.10.45] - any address in the 10.10.10.0/24 subnet except for 10.10.10.45\n- $HOME_NET - Range or ranges that you defined in the suricata.yaml configuration file \n\n#### Ports\n\nWhat ports the traffic is using. For HTTP it's common to set the source port as any and destination port as 80 for example.\nDifferent modifiers are also supported:\n- ! - exception/negation\n- : - range\n- [] - signs to make clear which parts belong together\n- , - separation\n\n#### Direction\n\nWhich way the traffic has to flow. Almost all rules have an arrow to the right, indicating that only packets with the same direction can match.\nExamples:\n- source -> destination\n- source <> destination  (both directions) \n\n### Rule-options\n\nThese are specified as key:value pairs. Each pair should end with a \";\". Like this:\n\n```\nsid:2008124;\n```\n\nThese options can generally be split into four categories:\n- meta-information.\n-headers\n- payloads\n- flows\n\nYou can refer to the material link attached to this objective for a more in depth look at all the options available.",
			"createdAt": "2018-01-12T12:39:17.830Z",
			"updatedAt": "2018-03-08T10:44:36.979Z",
			"longTitle": "My first rule",
			"enabled": true,
			"compulsory": true,
			"completionMethod": "view",
			"steps": [
				{
					"title": "Write rule",
					"weight": 1,
					"uname": "step-3zc0",
					"description": "Now that we have our IDS up and running. We'll dive into creating rules. We will start of with something simple, both to verify that Suricata is operating correctly and to get you familiar with the different parts of a rule.\nIn this objective you have to write a **Suricata rule to alert on any ICMP traffic destined for the webserver**. Use the explanation given in the previous step as a guide.\n\nThings to note:\n- Make sure to include a `msg` field. The msg field should describe the traffic.\n- Make use of the `$HOME_NET` and `EXTERNAL_NET` variables\n- Include a SID number from the correct range of 1000000-1999999. You can find more information about sid range assignements from the materials link\n- Create file `/etc/suricata/rules/custom.rules` and place your rule inside it.",
					"createdAt": "2018-01-12T12:39:52.819Z",
					"updatedAt": "2018-04-12T13:04:36.132Z",
					"longTitle": "Write rule",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "test",
					"material": "http://doc.emergingthreats.net/bin/view/Main/SidAllocation",
					"web": ""
				},
				{
					"title": "Test rule",
					"weight": 1,
					"uname": "step-m071",
					"description": "In the last step you created a rule and placed it in the file `/etc/suricata/rules/custom.rules`. Now you must tell Suricata about the new rule. \n\n1. Add the filename to `/etc/suricata/suricata.yaml` in the `rule-files` list\n1. You can tell Suricata to reload configurations and rules with the following command: `kill -USR2 $(cat /var/run/suricata.pid)`\n1. Verify that the rule creates an alert for the right traffic in /var/log/suricata/fast.log\n1. The answer to this objective, is the source IP listed in the alert.",
					"createdAt": "2018-01-12T12:40:00.032Z",
					"updatedAt": "2018-04-13T11:28:00.994Z",
					"longTitle": "Test rule",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "form",
					"material": "",
					"web": ""
				},
				{
					"title": "Drop rule",
					"weight": 1,
					"uname": "step-5v02",
					"description": "We have already configured Suricata to run in inline mode.\nNow  you should modify your previously created rule to drop traffic instead of alerting.\n\nFor this, change the action keyword in the beginning of your rule from `alert` to `drop`",
					"createdAt": "2018-04-08T11:12:32.438Z",
					"updatedAt": "2018-04-12T13:04:15.190Z",
					"longTitle": "Drop rule",
					"enabled": true,
					"visible": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				}
			],
			"material": "http://suricata.readthedocs.io/en/suricata-4.0.4/rules/intro.html",
			"web": ""
		}
	],
	"disable_clipboard": false,
	"ownername": "andreselliku"
}