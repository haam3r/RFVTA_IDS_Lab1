{
	"_id": "MckZN8X24RLdAPrdQ",
	"title": "IDS/IPS system basics",
	"description": "How to install and configure Suricata IDS. Writing your first rule.\nConfiguring IPS mode with drop rules.",
	"success": "Profit!",
	"owner": "AqW8vDWa49bAp7jnG",
	"createdAt": "2018-01-12T12:18:55.365Z",
	"updatedAt": "2018-03-05T13:55:00.641Z",
	"in_hub": false,
	"allow_end": false,
	"show_chat": false,
	"disable_feedback": false,
	"display": "progress",
	"git": {
		"uri": "git@github.com:haam3r/RFVTA_IDS_Lab1.git",
		"user": "AqW8vDWa49bAp7jnG",
		"branch": "",
		"files": [
			{
				"path": "bootstrap.sh",
				"commit": {
					"hash": "latest",
					"author": "N/A",
					"date": "N/A",
					"message": "latest commit in this branch"
				},
				"branch": "master",
				"name": "labinit.sh"
			}
		]
	},
	"display_unit": "%",
	"version": "0.1",
	"contributors": [
		"9BEHk7T3vJrCJTWcs"
	],
	"test_users": [],
	"material": "",
	"web": "",
	"topology": "",
	"objectives": [
		{
			"title": "Introduction",
			"weight": 1,
			"oname": "obj-djk",
			"description": "# Introduction\n\nThis lab helps you to become familiar with IDS/IPS systems. But let's start off with a refresher on what they are and how they operate. After that a brief description of what this lab will cover so you know what to expect.\n\n## Intrusion Detection System\n\nIntrusion Detection System (here on out IDS) is a solution designed to monitor network traffic to discover anomalous behaviour. Ad IDS solution works by receiving a copy of  the infrastructures network traffic and matching network packet header and/or content against signatures. Intrusion Prevention System (here on out IPS) is usually a specific configuration of an IDS where the device or software is configured in a way where the traffic actually passes through the device, giving the additional ability of blocking traffic that matches a signature.",
			"createdAt": "2018-01-12T12:32:52.796Z",
			"updatedAt": "2018-02-26T20:30:12.329Z",
			"longTitle": "Introduction",
			"enabled": true,
			"compulsory": true,
			"completionMethod": "view",
			"steps": [
				{
					"title": "Lab infra",
					"weight": 1,
					"uname": "step-rf70",
					"description": "# General overview of the labs infrastructure\n\nYour lab is composed of three machines:\n- Desktop machine from where you can administer the other systems\n- Web server providing a webpage that you are tasked with defending\n- IDS server that is in front of both of them. \n\nBelow you can find complete details on the machines.\n\n### Web server\n- username: student\n- IP: {{ IP of web server }}\n\n### IDS\n- username: student\n- IP: {{ IP of IDS }}\n\n### Desktop\n- username: student\n- IP: {{ IP of desktop }}",
					"createdAt": "2018-01-12T12:33:42.024Z",
					"updatedAt": "2018-02-26T20:33:33.060Z",
					"longTitle": "Lab infra",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				},
				{
					"title": "Rules",
					"weight": 1,
					"uname": "step-puh1",
					"description": "# Rules of the lab\n\n- Please do not alert or block on SSH traffic. In addition to you, it's used for checks and setting up various things to make your learning experience the best possible.\n\n\nWhat the student needs to account for. For example SSH is used for checks and not for attacks.\nHow many times can you enter a wrong answer for an objective etc.",
					"createdAt": "2018-01-12T12:36:34.786Z",
					"updatedAt": "2018-02-26T20:39:42.040Z",
					"longTitle": "Rules",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				}
			],
			"material": "",
			"web": ""
		},
		{
			"title": "Setup IDS",
			"weight": 1,
			"oname": "obj-hn3",
			"description": "# Installing Suricata IDS\n\nThe first thing with any software, is to install and configure it. This objective will walk you through installing the open-source Suricata IDS system. After installation we will cover the basic configuration options, to get everything up and running.\n\nThe material link references Suricata's official documentation for installing it on Ubuntu through their official PPA(Personal Package Archive).",
			"createdAt": "2018-01-12T12:38:12.668Z",
			"updatedAt": "2018-02-26T20:43:59.830Z",
			"longTitle": "Setup IDS",
			"enabled": true,
			"compulsory": true,
			"completionMethod": "view",
			"steps": [
				{
					"title": "Install Suricata",
					"weight": 1,
					"uname": "step-rx10",
					"description": "# Installation steps\n\nAlthough there are many ways to install Suricata, the easiest way on Ubuntu is to use a PPA(Personal Package Archive). Installing this way get's us up and running quickly with prebuilt packages and sensible defaults. On smaller networks this setup usually more than sufficient. On high traffic networks however, building from source with custom options and utilizing other capture librarys can yield signifcant performance gains. We will cover more advanced install modes later.\n\n## Install\n \n```bash\n# Add the Suricata PPA\nsudo add-apt-repository ppa:oisf/suricata-stable\n# Refresh package lists\nsudo apt-get update\n# Install suricata\napt-get install suricata\n```\n\nAs you can see, the PPA makes installation a breeze. Continue to configuration.\n\n## Checks:\n```bash\ndpkg -l | grep suricata\n```",
					"createdAt": "2018-01-12T12:38:27.035Z",
					"updatedAt": "2018-02-26T20:51:50.828Z",
					"longTitle": "Install Suricata",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "test",
					"material": "",
					"web": ""
				},
				{
					"title": "Configure Suricata",
					"weight": 1,
					"uname": "step-rjo1",
					"description": "# Configuring Suricata\n\nBy default all configuration parametes for Suricata are placed inside the file `/etc/suricata/suricata.yaml`. This is also true when installing from the PPA.\nYou will now have to configure the minimum neccessary options to get Suricata up and running.\n\nOpen `/etc/suricata/suricata.yaml` in a text editor and configure the following options:\n1. In the very beginning under `address-groups` configure the `HOME_NET` parameter to your local subnet\n1. Find the `af-packet` section and under that configure the interfaces list to match your external network interface\n1. Run `systemctl restart suricata` to reload the configuration changes\n\n### Checks\n  ```bash\n  if [ $(systemctl status suricata) -eq 0] && [ $(grep -i 'engine started' /var/log/suricata/suricata.log) -eq 0 ] && [ $(ps auxf | grep '[s]uricata') -eq 0 ]\n  then\n      echo \"Success\"\n  fi\n  ```",
					"createdAt": "2018-01-12T12:38:40.721Z",
					"updatedAt": "2018-02-26T20:53:33.426Z",
					"longTitle": "Configure Suricata",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				}
			],
			"material": "https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Ubuntu_Installation_-_Personal_Package_Archives_(PPA)",
			"web": ""
		},
		{
			"title": "My first rule",
			"weight": 1,
			"oname": "obj-h66",
			"description": "Now that we have Suricata up and running, it's time to start writing rules.\n\n![Example rule](https://redmine.openinfosecfoundation.org/attachments/download/440/intro_sig.png)\n\n## The three parts of a rule\n\n### Action\nWhat to do when a signature matches. There are four options:\n- pass - When a packet matches a signature, stop scanning the packet and for the current packet skip to the end of the rules\n- drop - If a signature matches, drop the packet. Only for IPS/inline mode. Will also log an alert. On the other hand will cause timeouts, because the other end will get no feedback.\n - reject - Reject the packet by sending either a tcp reset or icmp error packet. Also generate and alert and in IPS/inline mode the packet will also be dropped\n - alert - If a signature matches the packet, generate an alert.\n\n### Header\nSpecifys what kind of traffic to match the rule-options against. This has multiple options. Whenever possible try to specify one of the application layer protocols. This reduces the amount of matching that the engine has to do.\n\n#### Protocol\nHas 4 main options:\n- tcp - Any TCP traffic\n-  udp - Any UDP traffic\n- icmp - Any ICMP traffic\n- ip - Any traffic i.e. all of the above\n\nIn addition to these, Suricata also supports some application layer protocols:\n- http\n- ftp\n- tls (this includes ssl)\n- smb \n- dns\n\n#### Source and destination\nHere you can specify IPv4 and IPv6 addresses (both single addresses and CIDR matches are supported) that the traffic should match. You can also use variables like $HOME_NET that can be specified in the suricata.yaml configuration file. Negation matches with \"!\" and grouping matches with \"[]\" are also supported.\n\n**Examples:**\n- !192.168.1.1/24 - any address that does not belong to this subnet\n- [10.10.10.0/24, !10.10.10.45] - any address in the 10.10.10.0/24 subnet except for 10.10.10.45\n- $HOME_NET - Range or ranges that you defined in the suricata.yaml configuration file \n\n#### Ports\n\nWhat ports the traffic is using. For HTTP it's common to set the source port as any and destination port as 80 for example.\nDifferent modifiers are also supported:\n- ! - exception/negation\n- : - range\n- [] - signs to make clear which parts belong together\n- , - separation\n\n#### Direction\n\nWhich way the traffic has to flow. Almost all rules have an arrow to the right, indicating that only packets with the same direction can match.\nExamples:\n- source -> destination\n- source <> destination  (both directions) \n\n### Rule-options",
			"createdAt": "2018-01-12T12:39:17.830Z",
			"updatedAt": "2018-03-05T13:55:00.640Z",
			"longTitle": "My first rule",
			"enabled": true,
			"compulsory": true,
			"completionMethod": "view",
			"steps": [
				{
					"title": "Write rule",
					"weight": 1,
					"uname": "step-3zc0",
					"description": "Now that we have our IDS up and running. We'll dive into creating rules. We will start of with something simple, both to verify that Suricata is operating correctly and to get you familiar with the different parts of a rule.\nIn this objective you have to write a **Suricata rule to alert on any ICMP traffic**. Use the explanation given in the previous step as a guide.\n\nChecks:\n```bash\nls /etc/suricata/rules/custom.rules\n```",
					"createdAt": "2018-01-12T12:39:52.819Z",
					"updatedAt": "2018-03-05T11:41:05.357Z",
					"longTitle": "Write rule",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				},
				{
					"title": "Test rule",
					"weight": 1,
					"uname": "step-m071",
					"description": "Add rule to suricata configs. Make sure rule fires and alert is logged.\n\n- Checks:\n  - Alerts for the right criteria appear.\n  ```bash\n  # TODO: Grep criteria probably needs refinement/Also check that right attacking ip is logged\n  if [ $(grep -i 'icmp' /var/log/suricata/fast.log) -eq 0 ]\n  then\n      echo \"Success\"\n  fi\n  ```",
					"createdAt": "2018-01-12T12:40:00.032Z",
					"updatedAt": "2018-01-12T12:51:12.091Z",
					"longTitle": "Test rule",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				}
			],
			"material": "https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Suricata_Rules",
			"web": ""
		},
		{
			"title": "IPS Mode",
			"weight": 1,
			"oname": "obj-861",
			"description": "How to run Suricata in IPS mode aka ability to block traffic based on signatures",
			"createdAt": "2018-01-12T12:41:30.711Z",
			"updatedAt": "2018-01-12T12:51:51.027Z",
			"longTitle": "IPS Mode",
			"enabled": true,
			"compulsory": true,
			"completionMethod": "view",
			"steps": [
				{
					"title": "Run in IPS mode",
					"weight": 1,
					"uname": "step-p7x0",
					"description": "Reconfigure Suricata to run inline IPS\n\nChecks:\n```bash\n# NFQueue support\nsuricata --build-info | grep NFQueue | awk '{print $3}'\n# running with q option\nps auxf | grep 'suricata' | grep '-q'\n# IPTables\nsudo iptables -vnL | grep 'NFQUEUE'\n```",
					"createdAt": "2018-01-12T12:41:48.716Z",
					"updatedAt": "2018-01-12T13:00:22.337Z",
					"longTitle": "Run in IPS mode",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				},
				{
					"title": "Drop rule",
					"weight": 1,
					"uname": "step-i1r1",
					"description": "Convert previous ICMP alert rule to drop rule.\n\n- Checks:\n  - Traffic does not reach web server/PING reply does not succeed, but web request works.\n  ```bash\n  if [ $(ping -c 1 1.2.3.4) -ne 0 ] && [ $(curl -m 3 http://1.2.3.4) -eq 0 ]\n  then\n      echo \"Success\"\n  fi\n  ```",
					"createdAt": "2018-01-12T12:42:02.856Z",
					"updatedAt": "2018-01-12T12:42:28.390Z",
					"longTitle": "Drop rule",
					"enabled": true,
					"compulsory": true,
					"completionMethod": "view",
					"material": "",
					"web": ""
				}
			],
			"material": "",
			"web": ""
		}
	],
	"ownername": "andreselliku"
}